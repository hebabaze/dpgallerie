name: APK Build

on:
  # Runs on push to any of the below branches
  push:
    branches:
      - master
      - main
  # Runs on pull request events that target one of the below branches
  pull_request:
    branches:
      - master
      - main

  # Allows you to run this workflow manually from the Actions tab of the repository
  workflow_dispatch:

env:
  # Build and versioning
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0
  PYTHON_VERSION: 3.12.2
  FLUTTER_VERSION: 3.24.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Setup Python
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Step 3: Install Python dependencies and Flet
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flet

    # Step 4: Setup Flutter
    - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    # Step 5: Setup Java JDK (required for Android builds)
    - name: Setup Java JDK
      uses: actions/setup-java@v4.2.1
      with:
        distribution: 'temurin'
        java-version: '17' # Updated to use a stable version for Android builds

    # Step 6: Build the APK with Flet
    - name: Flet Build APK
      run: |
        flutter config --no-analytics # Disable Flutter analytics
        flet pack android --build-name ${{ env.BUILD_VERSION }} --build-number ${{ env.BUILD_NUMBER }}

    # Step 7: Upload APK Artifact
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk-build-artifact # Name of the artifact
        path: build/app/outputs/flutter-apk/app-release.apk # Location of the APK
        if-no-files-found: error # Fail the action if no APK is found
